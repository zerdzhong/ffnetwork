diff --git a/CMakeLists.txt b/CMakeLists.txt
index 388f790db..67d3da24e 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -76,6 +76,7 @@ option(PICKY_COMPILER "Enable picky compiler options" ON)
 option(BUILD_CURL_EXE "Set to ON to build curl executable." ON)
 option(BUILD_SHARED_LIBS "Build shared libraries" ON)
 option(ENABLE_ARES "Set to ON to enable c-ares support" OFF)
+option(CURL_INSTALL "Set to ON to enable installation support" ON)
 if(WIN32)
   option(CURL_STATIC_CRT "Set to ON to build libcurl with static CRT on Windows (/MT)." OFF)
   option(ENABLE_INET_PTON "Set to OFF to prevent usage of inet_pton when building against modern SDKs while still requiring compatibility with older Windows versions, such as Windows XP, Windows Server 2003 etc." ON)
@@ -353,12 +354,12 @@ if(CMAKE_USE_OPENSSL)
   # Depend on OpenSSL via imported targets if supported by the running
   # version of CMake.  This allows our dependents to get our dependencies
   # transitively.
-  if(NOT CMAKE_VERSION VERSION_LESS 3.4)
-    list(APPEND CURL_LIBS OpenSSL::SSL OpenSSL::Crypto)
-  else()
+#  if(NOT CMAKE_VERSION VERSION_LESS 3.4)
+#    list(APPEND CURL_LIBS OpenSSL::SSL OpenSSL::Crypto)
+#  else()
     list(APPEND CURL_LIBS ${OPENSSL_LIBRARIES})
     include_directories(${OPENSSL_INCLUDE_DIR})
-  endif()
+#  endif()
 
   set(CMAKE_REQUIRED_INCLUDES ${OPENSSL_INCLUDE_DIR})
   check_include_file("openssl/crypto.h" HAVE_OPENSSL_CRYPTO_H)
@@ -1331,13 +1332,13 @@ configure_package_config_file(CMake/curl-config.cmake.in
         "${project_config}"
         INSTALL_DESTINATION ${CURL_INSTALL_CMAKE_DIR}
 )
-
+if(CURL_INSTALL)
 install(
         EXPORT "${TARGETS_EXPORT_NAME}"
         NAMESPACE "${PROJECT_NAME}::"
         DESTINATION ${CURL_INSTALL_CMAKE_DIR}
 )
-
+endif()
 install(
         FILES ${version_config} ${project_config}
         DESTINATION ${CURL_INSTALL_CMAKE_DIR}
diff --git a/lib/CMakeLists.txt b/lib/CMakeLists.txt
index eca9a8af9..6b3c0d423 100644
--- a/lib/CMakeLists.txt
+++ b/lib/CMakeLists.txt
@@ -108,6 +108,7 @@ target_include_directories(${LIB_NAME} INTERFACE
   $<INSTALL_INTERFACE:include>
   $<BUILD_INTERFACE:${CURL_SOURCE_DIR}/include>)
 
+if(CURL_INSTALL)
 install(TARGETS ${LIB_NAME}
   EXPORT ${TARGETS_EXPORT_NAME}
   ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
@@ -119,3 +120,4 @@ export(TARGETS ${LIB_NAME}
        APPEND FILE ${PROJECT_BINARY_DIR}/libcurl-target.cmake
        NAMESPACE CURL::
 )
+endif()
\ No newline at end of file
